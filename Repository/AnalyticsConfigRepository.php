<?php

namespace Kunstmaan\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Kunstmaan\AdminBundle\Entity\AnalyticsConfig;

/**
 * AnalyticsConfigRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnalyticsConfigRepository extends EntityRepository
{
    /**
     * Get the config from the database, creates a new entry if the config doesn't exist yet
     *
     * @return Config $config
     */
    public function getConfig()
    {
        $em    = $this->getEntityManager();
        $query = $em->createQuery(
          'SELECT c FROM KunstmaanAdminBundle:AnalyticsConfig c'
        );

        $result = $query->getResult();
        if (!$result) {
            $config = new AnalyticsConfig();
            $em->persist($config);
            $em->flush();
        } else {
            $config = $result[0];
        }

        return $config;
    }

    /** Update the timestamp when data is collected */
    public function setUpdated() {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setLastUpdate(new \DateTime());
        $em->persist($config);
        $em->flush();
    }

    /**
     * saves the token
     *
     * @param string $token
     */
    public function saveToken($token) {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setToken($token);
        $em->persist($config);
        $em->flush();
    }

    /**
     * saves the property id
     *
     * @param string $propertyId
     */
    public function savePropertyId($propertyId) {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setPropertyId($propertyId);
        $em->persist($config);
        $em->flush();
    }

    /**
     * saves the account id
     *
     * @param string $accountId
     */
    public function saveAccountId($accountId) {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setAccountId($accountId);
        $em->persist($config);
        $em->flush();
    }

    /**
     * saves the profile id
     *
     * @param string $profileId
     */
    public function saveProfileId($profileId) {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setProfileId($profileId);
        $em->persist($config);
        $em->flush();
    }

    /** resets the profile id */
    public function resetProfileId() {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setProfileId('');
        $em->persist($config);
        $em->flush();
    }

    /** resets the  account id, property id and profile id */
    public function resetPropertyId() {
        $em    = $this->getEntityManager();
        $config = $this->getConfig();
        $config->setAccountId('');
        $config->setProfileId('');
        $config->setPropertyId('');
        $em->persist($config);
        $em->flush();
    }
}
